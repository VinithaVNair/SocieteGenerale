//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerInformationUserInterface.ServerInformationProviderReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerInformation", Namespace="http://schemas.datacontract.org/2004/07/ServerInformationShared")]
    [System.SerializableAttribute()]
    public partial class ServerInformation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MemoryUsageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ProcessorUsageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MemoryUsage {
            get {
                return this.MemoryUsageField;
            }
            set {
                if ((this.MemoryUsageField.Equals(value) != true)) {
                    this.MemoryUsageField = value;
                    this.RaisePropertyChanged("MemoryUsage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float ProcessorUsage {
            get {
                return this.ProcessorUsageField;
            }
            set {
                if ((this.ProcessorUsageField.Equals(value) != true)) {
                    this.ProcessorUsageField = value;
                    this.RaisePropertyChanged("ProcessorUsage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerName {
            get {
                return this.ServerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNameField, value) != true)) {
                    this.ServerNameField = value;
                    this.RaisePropertyChanged("ServerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerInformationProviderReference.IServerInformationProvider")]
    public interface IServerInformationProvider {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProvider/GetAllHostAvailable", ReplyAction="http://tempuri.org/IServerInformationProvider/GetAllHostAvailableResponse")]
        string[] GetAllHostAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProvider/GetAllHostAvailable", ReplyAction="http://tempuri.org/IServerInformationProvider/GetAllHostAvailableResponse")]
        System.Threading.Tasks.Task<string[]> GetAllHostAvailableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProvider/GetHostInformation", ReplyAction="http://tempuri.org/IServerInformationProvider/GetHostInformationResponse")]
        ServerInformationUserInterface.ServerInformationProviderReference.ServerInformation[] GetHostInformation(string hostName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProvider/GetHostInformation", ReplyAction="http://tempuri.org/IServerInformationProvider/GetHostInformationResponse")]
        System.Threading.Tasks.Task<ServerInformationUserInterface.ServerInformationProviderReference.ServerInformation[]> GetHostInformationAsync(string hostName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerInformationProviderChannel : ServerInformationUserInterface.ServerInformationProviderReference.IServerInformationProvider, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerInformationProviderClient : System.ServiceModel.ClientBase<ServerInformationUserInterface.ServerInformationProviderReference.IServerInformationProvider>, ServerInformationUserInterface.ServerInformationProviderReference.IServerInformationProvider {
        
        public ServerInformationProviderClient() {
        }
        
        public ServerInformationProviderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerInformationProviderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerInformationProviderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerInformationProviderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetAllHostAvailable() {
            return base.Channel.GetAllHostAvailable();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllHostAvailableAsync() {
            return base.Channel.GetAllHostAvailableAsync();
        }
        
        public ServerInformationUserInterface.ServerInformationProviderReference.ServerInformation[] GetHostInformation(string hostName) {
            return base.Channel.GetHostInformation(hostName);
        }
        
        public System.Threading.Tasks.Task<ServerInformationUserInterface.ServerInformationProviderReference.ServerInformation[]> GetHostInformationAsync(string hostName) {
            return base.Channel.GetHostInformationAsync(hostName);
        }
    }
}
