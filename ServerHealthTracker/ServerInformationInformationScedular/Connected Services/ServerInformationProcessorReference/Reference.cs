//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerInformationInformationSchedular.ServerInformationProcessorReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerInformationProcessorReference.IServerInformationProcessor")]
    public interface IServerInformationProcessor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProcessor/GetAllHostAvailable", ReplyAction="http://tempuri.org/IServerInformationProcessor/GetAllHostAvailableResponse")]
        string[] GetAllHostAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProcessor/GetAllHostAvailable", ReplyAction="http://tempuri.org/IServerInformationProcessor/GetAllHostAvailableResponse")]
        System.Threading.Tasks.Task<string[]> GetAllHostAvailableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProcessor/GetHostInformation", ReplyAction="http://tempuri.org/IServerInformationProcessor/GetHostInformationResponse")]
        ServerInformationShared.ServerInformation[] GetHostInformation(string hostName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProcessor/GetHostInformation", ReplyAction="http://tempuri.org/IServerInformationProcessor/GetHostInformationResponse")]
        System.Threading.Tasks.Task<ServerInformationShared.ServerInformation[]> GetHostInformationAsync(string hostName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProcessor/AddServer", ReplyAction="http://tempuri.org/IServerInformationProcessor/AddServerResponse")]
        void AddServer(string hostName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProcessor/AddServer", ReplyAction="http://tempuri.org/IServerInformationProcessor/AddServerResponse")]
        System.Threading.Tasks.Task AddServerAsync(string hostName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProcessor/SetServerInformation", ReplyAction="http://tempuri.org/IServerInformationProcessor/SetServerInformationResponse")]
        void SetServerInformation(ServerInformationShared.ServerInformation serverInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerInformationProcessor/SetServerInformation", ReplyAction="http://tempuri.org/IServerInformationProcessor/SetServerInformationResponse")]
        System.Threading.Tasks.Task SetServerInformationAsync(ServerInformationShared.ServerInformation serverInformation);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerInformationProcessorChannel : ServerInformationInformationSchedular.ServerInformationProcessorReference.IServerInformationProcessor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerInformationProcessorClient : System.ServiceModel.ClientBase<ServerInformationInformationSchedular.ServerInformationProcessorReference.IServerInformationProcessor>, ServerInformationInformationSchedular.ServerInformationProcessorReference.IServerInformationProcessor {
        
        public ServerInformationProcessorClient() {
        }
        
        public ServerInformationProcessorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerInformationProcessorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerInformationProcessorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerInformationProcessorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetAllHostAvailable() {
            return base.Channel.GetAllHostAvailable();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllHostAvailableAsync() {
            return base.Channel.GetAllHostAvailableAsync();
        }
        
        public ServerInformationShared.ServerInformation[] GetHostInformation(string hostName) {
            return base.Channel.GetHostInformation(hostName);
        }
        
        public System.Threading.Tasks.Task<ServerInformationShared.ServerInformation[]> GetHostInformationAsync(string hostName) {
            return base.Channel.GetHostInformationAsync(hostName);
        }
        
        public void AddServer(string hostName) {
            base.Channel.AddServer(hostName);
        }
        
        public System.Threading.Tasks.Task AddServerAsync(string hostName) {
            return base.Channel.AddServerAsync(hostName);
        }
        
        public void SetServerInformation(ServerInformationShared.ServerInformation serverInformation) {
            base.Channel.SetServerInformation(serverInformation);
        }
        
        public System.Threading.Tasks.Task SetServerInformationAsync(ServerInformationShared.ServerInformation serverInformation) {
            return base.Channel.SetServerInformationAsync(serverInformation);
        }
    }
}
